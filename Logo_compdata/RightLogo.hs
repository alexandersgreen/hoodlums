{-# LANGUAGE DeriveFunctor, TemplateHaskell, TypeOperators #-}
{-# LANGUAGE FlexibleInstances, MultiParamTypeClasses, FlexibleContexts #-} 
{-# LANGUAGE UndecidableInstances, IncoherentInstances #-}

-- | This module contains the definition of our logo right turn command, along
-- with an instance for evaluation, and parsing.
module RightLogo where

import SVG
import Eval
import Parse

import Data.Comp
import Data.Comp.Derive
import Data.Comp.Show

import Control.Monad.State

import Text.ParserCombinators.Parsec
import Control.Applicative hiding ((<|>))

-- | We can represent an angle as a double
type Angle = Double

-- | The data-type representing a right turn command, automatically derives
-- an instance of the Functor type class. We also use compdata to derive
-- smart constructors.
data RightLogoF r = RT Angle
 deriving (Functor, Eq, Show)

derive [makeEqF, makeShowF,smartConstructors] [''RightLogoF]

-- | A right turn command can be evaluated
instance Eval RightLogoF where
  evalAlg (RT a) = do
   (Turtle pos dir) <- get
   put (Turtle pos (dir + a))
   return []

-- | A right-turn command can be generated by a parser
instance (RightLogoF :<: l, Functor l) => Parse RightLogoF l where
 parser _ = iRT <$> (string "rt" *> many1 space *> double)
